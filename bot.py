import os, discord, asyncio, sqlite3, sys, time, socket, requests
from discord import app_commands, Color, ui, utils
from discord.ext import tasks
from icecream import ic
from random import randint, choice
from data.emojis import emojis
from humanfriendly import parse_timespan, InvalidTimespan
from datetime import datetime, timedelta
from openai import OpenAI
from discord_webhook import DiscordWebhook, DiscordEmbed

#–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –º–æ–Ω–æ–ª–∏—Ç–∞(
import data.config as config
from data.ai_utils import api_status, fetch_models, generate_response
from data.tickets_utils import ticket_launcher, ticket_operator

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫ embed
def interaction_author(embed: discord.Embed, interaction: discord.Interaction):
    embed.set_author(name=interaction.user.name, icon_url=interaction.user.display_avatar)
    return embed

#–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async def drop_table(table, original_intrct, intrct):
    connection = sqlite3.connect('data/primary.db')
    cursor = connection.cursor()
    match table:
        case 'warns':
            cursor.execute(f'DROP TABLE IF EXISTS {table}')
            await original_intrct.delete_original_response()
            embed = discord.Embed(title='–¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–Ω–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!', color=config.danger)
            interaction_author(embed, intrct)
            result = await intrct.response.send_message(embed=embed)
            cursor.execute(f'CREATE TABLE {table} (warn_id INTEGER PRIMARY KEY, name TEXT NOT NULL, reason TEXT, message TEXT, lapse_time INTEGER)')
            cursor.execute(f'INSERT INTO {table} VALUES (0, "none", "none", "none", 0)')
    if not "embed" in locals():
        await original_intrct.delete_original_response()
        await intrct.response.send_message(f'–¢–∞–±–ª–∏—Ü—ã {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüò®', ephemeral=True)
    connection.commit()
    connection.close()

#–ü–µ—Ä–µ–≤–æ–¥ –¥–∞—Ç—ã –≤ unix (—Å–µ–∫—É–Ω–¥—ã)
def unix_datetime(source):
    return int(time.mktime(source.timetuple()))

#–ú—É—Ç. –ñ–µ—Å—Ç–æ–∫–æ –∏ —Å–µ—Ä–¥–∏—Ç–æ.
async def mute(intrct, target, timespan):
    try:
        real_timespan = parse_timespan(timespan)
    except InvalidTimespan:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å {timespan}')
        return
    
    #–ö–æ—Ä–µ–Ω—å –∑–ª–∞
    try:
        await target.timeout(datetime.now().astimezone() + timedelta(seconds=real_timespan))
    except:
        embed = discord.Embed(title=f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüò®', color=config.danger)
        await intrct.channel.send(embed = embed)
        return
    
    embed = discord.Embed(title=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.', description=f'–û–Ω —Å–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –≥–æ–≤–æ—Ä–∏—Ç—å <t:{unix_datetime(datetime.now().astimezone() + timedelta(seconds=real_timespan))}:R>', color=config.warning)
    await intrct.channel.send(embed = embed)


class drop_confirm(discord.ui.View):
    def __init__(self, table, intrct) -> None:
        self.table = table
        self.intrct = intrct
        super().__init__(timeout=None)

    @discord.ui.button(label="–ñ–º–∏! –ñ–º–∏! –ñ–º–∏!", style=discord.ButtonStyle.red, custom_id="close_ticket")
    async def drop(self, interaction, button):
        await drop_table(self.table, self.intrct, interaction)


#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@tasks.loop(seconds = 60)
async def presence():
    emoji = choice(emojis)
    online_members = [member for member in client.get_guild(1122085072577757275).members if not member.bot and member.status == discord.Status.online]
    if online_members:
        activity_text = f'{choice(online_members).display_name} {emoji}'
        await client.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=activity_text))


#–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
@tasks.loop(hours = 1)
async def lapse_of_warns():
    connection = sqlite3.connect('data/primary.db')
    cursor = connection.cursor()
    cursor.execute('SELECT warn_id, lapse_time FROM warns')
    warns = cursor.fetchall()
    warns.pop(0)
    for warn in warns:
        if unix_datetime(datetime.now()) >= warn[1]:
            cursor.execute(f'DELETE FROM warns WHERE warn_id = {warn[0]}')
    connection.commit()
    connection.close()


#–ü–æ–¥–≥—Ä—É–∑–∫–∞ view —Å —Ç–∏–∫–µ—Ç–∞–º–∏
@client.event
async def setup_hook():
    client.add_view(ticket_launcher.question())
    client.add_view(ticket_launcher.bug())
    client.add_view(ticket_launcher.report())
    client.add_view(ticket_launcher.application())
    client.add_view(ticket_operator())

#–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ –∏ –∏–Ω—Ñ–æ –æ –∑–∞–ø—É—Å–∫–µ
@client.event
async def on_ready():
    presence.start()
    lapse_of_warns.start()
    await tree.sync(guild=discord.Object(id=config.guild))
    print(f'{client.user.name} –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!    \n{round(client.latency * 1000)}ms')

#–ü–∏–Ω–≥ –±–æ—Ç–∞ –ø–æ slash-–∫–æ–º–º–∞–Ω–¥–µ
@tree.command(name="–ø–∏–Ω–≥", description="–ü–∏–Ω–≥–∞–Ω–∏ –±–æ—Ç–∞!", guild=discord.Object(id=config.guild))
async def on_ping(intrct):
    embed = discord.Embed(title="–ü–æ–Ω–≥!    ", description=f"{round(client.latency * 1000)}–º—Å", color=config.info)
    await intrct.response.send_message(embed=embed)

@client.event 
async def on_message(message):
    #–°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    if message.author == client.user:
        return
    if randint(0, 20) == 1:
        if message.channel.category_id not in config.very_serious_categories:
            await message.add_reaction(choice(message.guild.emojis))

    #–ß–∞—Ç –≥–ø—Ç
    if message.mentions and int(client.user.mention.replace(f'<@{client.user.id}>', str(client.user.id))) == message.mentions[0].id and message.channel.id in config.ai_channels:
        if api_status.status_code != 200:
            await message.add_reaction("‚ùé")
            embed = discord.Embed(title='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ API', description=f'**{api_status.status_code}: {api_status.reason}**', color=config.warning)
            await message.channel.send(embed = embed, delete_after = 15)
        else:
            await message.add_reaction("‚òë")
            for mention in message.mentions:
                    message.content = message.content.replace(f'<@{mention.id}>', f'{mention.display_name}')
            async with message.channel.typing():
                await message.channel.send(generate_response(message.content))

#–í—ã–¥–∞—á–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ú–µ—Ü–µ–Ω–∞—Ç –∑–∞ –±—É—Å—Ç
@client.event
async def on_member_update(before, after):
    if len(before.roles) < len(after.roles):
        new_role = next(role for role in after.roles if role not in before.roles)
        if new_role.id == config.nitro_booster_id:
            await after.add_roles(client.get_guild(int(config.guild)).get_role(1138436827909455925))
    elif len(before.roles) > len(after.roles):
        old_role = next(role for role in before.roles if role not in after.roles)
        if old_role.id == config.nitro_booster_id:
            await after.remove_roles(client.get_guild(int(config.guild)).get_role(1138436827909455925))

@tree.command(name="—Ç–∏–∫–µ—Ç", description="–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", guild=discord.Object(id=config.guild))
async def ticketing(intrct, title: str, description: str, type: str):
    match type:
        case '–í–æ–ø—Ä–æ—Å':
            embed = discord.Embed(title=title, description=description, color=config.info)
            await intrct.channel.send(embed=embed, view=ticket_launcher.question())
            client.add_view(ticket_launcher.question())
        case '–ë–∞–≥':
            embed = discord.Embed(title=title, description=description, color=config.danger)
            await intrct.channel.send(embed=embed, view=ticket_launcher.bug())
            client.add_view(ticket_launcher.bug())
        case '–ñ–∞–ª–æ–±–∞':
            embed = discord.Embed(title=title, description=description, color=config.warning)
            await intrct.channel.send(embed=embed, view=ticket_launcher.report())
            client.add_view(ticket_launcher.report())
        case '–ó–∞—è–≤–∫–∞':
            embed = discord.Embed(title=title, description=description, color=config.info)
            await intrct.channel.send(embed=embed, view=ticket_launcher.application())
            client.add_view(ticket_launcher.application())
    await intrct.response.send_message("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ (–∏–ª–∏ –ø–æ—á—Ç–∏) –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)

@tree.command(name="–≤—ã–µ–±–∞—Ç—å", description="–î–ª—è MAO", guild=discord.Object(id=config.guild))
async def on_sex(intrct):
    sex_variants = [f'–û, –¥–∞, {intrct.user.display_name}! –í—ã–µ–±–∏ –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, {intrct.user.display_name} üíï','–ë–æ–∂–µ –º–æ–π, –∫–∞–∫ —Å–∏–ª—å–Ω–æ... üíò','–ï—â–µ–µ–µ! –ï—â–µ–µ–µ–µ–µ–µ! üòç',f'{intrct.user.display_name}, —è –ª—é–±–ª—é —Ç–µ–±—è!']
    embed = discord.Embed(title = choice(sex_variants),description='', color = config.info)
    await intrct.response.send_message(embed = embed)

@tree.command(name="8ball", description="–ü–æ–≥–∞–¥–∞–µ–º~", guild=discord.Object(id=config.guild))
async def magic_ball(intrct):
    variants = ['–≠—Ç–æ —Ç–æ—á–Ω–æ.',
             '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.',
             '–î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ.',
             '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ.',
             '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –¥–∞.',
             '–í–µ—Ä–æ—è—Ç–Ω–æ.',
             '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ.',
             '–î–∞.',
             '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥–∞.',
             '–û—Ç–≤–µ—Ç –Ω–µ—è—Å–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
             '–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.',
             '–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.',
             '–°–µ–π—á–∞—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
             '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
             '–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ.',
             '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî –Ω–µ—Ç.',
             '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç.',
             '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.',
             '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.']
    embed = discord.Embed(title = choice(variants), color = config.info)
    await intrct.response.send_message(embed = embed)

@tree.command(name='–¥—Ä–æ–ø', description='–°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', guild=discord.Object(id=config.guild))
async def drop(intrct, table: str):
    if intrct.user.id not in config.bot_engineers:
        await intrct.response.send_message('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.', ephemeral=True)
        return
    embed = discord.Embed(title="–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É?", description=f"–ë—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table} —É {socket.gethostname()}", color=config.danger)
    await intrct.response.send_message(embed = embed, view = drop_confirm(table, intrct), ephemeral = True, delete_after = 15)
    
@tree.command(name="–≤–∞—Ä–Ω", description="–í—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", guild=discord.Object(id=config.guild))
async def warn(intrct, user: discord.Member, reason: str):
    connection = sqlite3.connect('data/primary.db')
    cursor = connection.cursor()
    if user.id == client.user.id:
        await intrct.response.send_message("–ù–µ—Ç.", ephemeral=True)
        return
    if user.bot == 1:
        await intrct.response.send_message("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç—É.", ephemeral=True)
        return
    if user == intrct.user:
        await intrct.response.send_message("–ü–æ–ø—Ä–æ—Å–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–≥–æ.", ephemeral=True)
        return
    dt_string = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    cursor.execute('SELECT max(warn_id) FROM warns')
    case_id = cursor.fetchone()[0] + 1
    embed = discord.Embed(
            title=f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
            description=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ \n–°–ª—É—á–∞–π {case_id}',
            color=config.info
        )
    interaction_author(embed, intrct)
    embed.add_field(
            name="–ü—Ä–∏—á–∏–Ω–∞:",
            value=reason,
            inline=False
        )
    embed.add_field(
            name="–ò—Å—Ç–µ–∫–∞–µ—Ç:",
            value=f"<t:{unix_datetime(datetime.now() + timedelta(days=30))}:f>",
        )
    await intrct.response.send_message(embed=embed)
    await intrct.guild.get_channel(config.warns_log_channel).send(embed = embed)
    response = await intrct.original_response()
    cursor.execute('INSERT INTO warns (name, reason, message, lapse_time) VALUES (?, ?, ?, ?)', (user.mention, reason, response.jump_url, unix_datetime(datetime.now() + timedelta(days=30))))
    cursor.execute('SELECT * FROM warns WHERE name = ?', (user.mention,))
    players_warns = len(cursor.fetchall())
    match players_warns:
        case 2:
            await mute(intrct, user, '1d')
        case 3:
            await mute(intrct, user, '2d')
        case 4:
            await mute(intrct, user, '7d')
    if players_warns >= 5:
        await mute(intrct, user, '14d')
    await intrct.channel.send(user.mention)

    connection.commit()
    connection.close()

@tree.command(name="—Å–ø–∏—Å–æ–∫_–≤–∞—Ä–Ω–æ–≤", description="–ü–æ–º–æ—â—å", guild=discord.Object(id=config.guild))
async def warns_list(intrct, user: discord.Member = None):
    if not user:
        user = intrct.user
    if user == client.user:
        await intrct.response.send_message("–¢—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å!", ephemeral=True)
        return
    connection = sqlite3.connect('data/primary.db')
    cursor = connection.cursor()
    cursor.execute('SELECT warn_id, reason, message, lapse_time FROM warns WHERE name = ?', (user.mention,))
    warns = cursor.fetchall()
    if warns:
        embed = discord.Embed(title=f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name}:', color=config.warning)
        interaction_author(embed, intrct)
        for warn in warns:
            embed.add_field(
                name=f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warn[0]}',
                value=f'–ü—Ä–∏—á–∏–Ω–∞: {warn[1]}  \n–°—Å—ã–ª–∫–∞: {warn[2]}   \n–ò—Å—Ç–µ–∫–∞–µ—Ç: <t:{warn[3]}:R>',
                inline=False
            )
        await intrct.response.send_message(embed=embed)
    else:
        embed = discord.Embed(title=f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name}:', description='–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç, –Ω–æ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!', color=config.info)
        interaction_author(embed, intrct)
        await intrct.response.send_message(embed=embed)
    connection.commit()
    connection.close()

@tree.command(name='—Å–Ω—è—Ç—å_–≤–∞—Ä–Ω', description='–î–æ—Å—Ä–æ—á–Ω–æ —Å–Ω—è—Ç—å –≤–∞—Ä–Ω', guild=discord.Object(id=config.guild))
async def warn_del(intrct, warn_id: int):
    if warn_id > 0:
        connection = sqlite3.connect('data/primary.db')
        cursor = connection.cursor()
        cursor.execute('DELETE FROM warns WHERE warn_id = ?', (warn_id,))
        embed = discord.Embed(title=f'–í–∞—Ä–Ω {warn_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç.', color=config.info)
        interaction_author(embed, intrct)
        await intrct.response.send_message(embed=embed)
        connection.commit()
        connection.close()
    else:
        embed = discord.Embed(title='–ù–µ –≤–ª–µ–∑–∞–π, —É–±—å—ë—Ç!', color=config.danger)
        await intrct.response.send_message(embed=embed, ephemeral=True)
    
@tree.command(name='–∞–≤–∞—Ç–∞—Ä', description='–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', guild=discord.Object(id=config.guild))
async def avatar(intrct, user: discord.Member = None):
    if user:
        embed = discord.Embed(title=f'–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name}:', color=config.info)
        embed.set_image(url=user.display_avatar.url)
        await intrct.response.send_message(embed=embed)
    else:
        embed = discord.Embed(title=f'–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {intrct.user.display_name}:', color=config.info)
        embed.set_image(url=intrct.user.display_avatar.url)
        await intrct.response.send_message(embed=embed)

@client.event
async def on_message_delete(message):
    if message.author == client.user:
        return
    attachments = ''
    if message.attachments:
        attachments_temp = []
        for attachment in message.attachments:
            attachments_temp.append(attachment.url)
        attachments = '\n'.join(attachments_temp)

    webhook = DiscordWebhook(
        url = config.main_logs_webhook_url,
        rate_limit_retry = True
    )
    embed = DiscordEmbed(title="üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –£–¥–∞–ª–µ–Ω–æ", color=config.info)
    embed.set_author(name=str(message.author), icon_url=str(message.author.display_avatar))
    embed.add_embed_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=str(message.author.mention), inline=False)
    if message.content != '':
        embed.add_embed_field(name="–°–æ–æ–±—â–µ–Ω–∏–µ", value=str(f"```{message.content}```" + attachments), inline=False)
    else:
        embed.add_embed_field(name="–í–ª–æ–∂–µ–Ω–∏—è", value=str(attachments), inline=False)
    embed.add_embed_field(name="–ö–∞–Ω–∞–ª", value=str(message.channel.mention), inline=False)
    webhook.add_embed(embed)
    response = webhook.execute()

@client.event
async def on_message_edit(message_before, message_after):
    if str(message_before.content) != str(message_after.content) and str(message_after.content) != '':      
        webhook = DiscordWebhook(
            url = config.main_logs_webhook_url,
            rate_limit_retry = True
        )
        embed = DiscordEmbed(title='‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', color=config.info)
        embed.set_author(name=str(message_before.author), icon_url=str(message_before.author.display_avatar))
        embed.add_embed_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=str(message_before.author.mention), inline=False)
        embed.add_embed_field(name="–î–æ", value=str(f"```{message_before.content}```"), inline=False)
        embed.add_embed_field(name="–ü–æ—Å–ª–µ", value=str(f"```{message_after.content}```"), inline=False)
        embed.add_embed_field(name="–ö–∞–Ω–∞–ª", value=str(message_after.channel.mention), inline=False)
        webhook.add_embed(embed)
        response = webhook.execute()

@client.event
async def on_voice_state_update(member_before, member_after):
    
    voice_channel_before = member_before.voice_channel
    voice_channel_after = member_after.voice_channel
    
    if voice_channel_before == voice_channel_after:
        # No change
        return
    
    if voice_channel_before == None:
        # The member was not on a voice channel before the change
        msg = "%s joined voice channel _%s_" % (member_after.mention, voice_channel_after.name)
        webhook = DiscordWebhook(
            url = config.main_logs_webhook_url,
            rate_limit_retry = True
        )
        embed = DiscordEmbed(title='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', color=config.info)
        embed.set_author(name=str(member_after.author), icon_url=str(member_after.author.display_avatar))
        embed.add_embed_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=str(member_after.mention), inline=False)
        embed.add_embed_field(name="–ö–∞–Ω–∞–ª", value=str(voice_channel_after.name), inline=False)
        webhook.add_embed(embed)
        response = webhook.execute()

    else:
        # The member was on a voice channel before the change
        if voice_channel_after == None:
            # The member is no longer on a voice channel after the change
            msg = "%s left voice channel _%s_" % (member_after.mention, voice_channel_before.name)
            webhook = DiscordWebhook(
                url = config.main_logs_webhook_url,
                rate_limit_retry = True
            )
            embed = DiscordEmbed(title='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í—ã—à–µ–ª', color=config.info)
            embed.set_author(name=str(member_after.author), icon_url=str(member_after.author.display_avatar))
            embed.add_embed_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=str(member_after.mention), inline=False)
            embed.add_embed_field(name="–ö–∞–Ω–∞–ª", value=str(voice_channel_before.name), inline=False)
            webhook.add_embed(embed)
            response = webhook.execute()
        else:
            # The member is still on a voice channel after the change
            msg = "%s switched from voice channel _%s_ to _%s_" % (member_after.mention, voice_channel_before.name, voice_channel_after.name)
            webhook = DiscordWebhook(
                url = config.main_logs_webhook_url,
                rate_limit_retry = True
            )
            embed = DiscordEmbed(title='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –°–º–µ–Ω–∏–ª –ö–∞–Ω–∞–ª', color=config.info)
            embed.set_author(name=str(member_after.author), icon_url=str(member_after.author.display_avatar))
            embed.add_embed_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=str(member_after.mention), inline=False)
            embed.add_embed_field(name="–ö–∞–Ω–∞–ª –î–æ", value=str(voice_channel_before.name), inline=False)
            embed.add_embed_field(name="–ö–∞–Ω–∞–ª –ü–æ—Å–ª–µ", value=str(voice_channel_after.name), inline=False)
            webhook.add_embed(embed)
            response = webhook.execute()

client.run(config.token)
