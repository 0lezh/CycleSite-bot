import os, discord, asyncio, sqlite3, sys, time
from discord import app_commands, Color, ui
from discord.ext import commands, tasks
from icecream import ic
from random import randint, choice
from data.emojis import emojis
import data.config as config
from datetime import datetime

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫ embed
def interaction_author(embed: discord.Embed, interaction: discord.Interaction):
    embed.set_author(name=interaction.user.name, icon_url=interaction.user.display_avatar)
    return embed

#–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å tickets_counter.txt
def tickets_counter_add():
    with open('data/tickets_counter.txt', 'r') as file:
        var = int(file.readline())
    with open('data/tickets_counter.txt', 'w+') as file:
        file.write(str(var + 1))
    return var

def unix_datetime(source):
    return int(time.mktime(source.timetuple()))

class application_type_select(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è)', emoji='üìã'),
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ SCP:SL', emoji='üëÆüèª‚Äç‚ôÇÔ∏è'),
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ Discord', emoji='üëæ'),
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö. –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', emoji='üíª'),
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–≤–µ–Ω—Ç–æ–ª–æ–≥–∞', emoji='üéà'),
            discord.SelectOption(label='–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π', emoji='üéì')
        ]

        super().__init__(placeholder='–ù–∞ –∫–∞–∫—É—é —Ä–æ–ª—å –±—É–¥–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å?', min_values=1, max_values=1, options=options, custom_id='application_type')

    async def callback(self, interaction: discord.Interaction):
        match self.values[0]:
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è)':
                await interaction.response.send_modal(modal.application.player_role())
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ SCP:SL':
                await interaction.response.send_modal(modal.application.administrator_scp())
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ Discord':
                await interaction.response.send_modal(modal.application.administrator_discord())
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö. –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
                await interaction.response.send_modal(modal.application.administrator_tech())
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–≤–µ–Ω—Ç–æ–ª–æ–≥–∞':
                await interaction.response.send_modal(modal.application.eventmaker())
            case '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π':
                await interaction.response.send_modal(modal.application.organization())

class report_type_select(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label='–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∏–≥—Ä–æ–∫–∞', emoji='‚úçüèª'),
            discord.SelectOption(label='–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', emoji='üí•'),
            discord.SelectOption(label='–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é', emoji='üóØ'),
        ]

        super().__init__(placeholder='–ß—Ç–æ –±—É–¥–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å?', min_values=1, max_values=1, options=options, custom_id='report_type')

    async def callback(self, interaction: discord.Interaction):
        match self.values[0]:
            case '–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∏–≥—Ä–æ–∫–∞':
                await interaction.response.send_modal(modal.report.player())
            case '–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
                await interaction.response.send_modal(modal.report.administrator())
            case '–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é':
                await interaction.response.send_modal(modal.report.appeal())

class ticket_launcher():
    class question(discord.ui.View):
        def __init__(self) -> None:
            super().__init__(timeout=None) 
        
        @discord.ui.button(label="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", style=discord.ButtonStyle.green, custom_id="open_question")
        async def open_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_modal(modal.question())
            
    
    class bug(discord.ui.View):
        def __init__(self) -> None:
            super().__init__(timeout=None) 
        
        @discord.ui.button(label="–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", style=discord.ButtonStyle.green, custom_id="open_bug")
        async def open_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_modal(modal.bug())

    class report(discord.ui.View):
        def __init__(self) -> None:
            super().__init__(timeout=None)
            self.add_item(report_type_select())
    
    class application(discord.ui.View):
        def __init__(self) -> None:
            super().__init__(timeout=None)
            self.add_item(application_type_select())

class modal():
    class question(ui.Modal, title='–í–æ–ø—Ä–æ—Å'):
        question_object = ui.TextInput(label='–¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞:', style=discord.TextStyle.short)
        question = ui.TextInput(label='–í–æ–ø—Ä–æ—Å:', style=discord.TextStyle.long)

        async def on_submit(self, interaction: discord.Interaction):
            thread = await interaction.channel.create_thread(name=f"–≤–æ–ø—Ä–æ—Å-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
            ticket_id = int(thread.name.split("-")[-1])
            open_embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
            open_embed = interaction_author(open_embed, interaction)
            modal_params = discord.Embed(color=config.colors.info)
            modal_params.add_field(name="**–¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞:**", value='>>> ' + self.question_object.value, inline=False)
            modal_params.add_field(name="**–í–æ–ø—Ä–æ—Å:**", value='>>> ' + self.question.value, inline=False)
            await thread.send(embeds=[open_embed, modal_params], view = ticket_operator())
            await thread.send(interaction.user.mention)
            await thread.send(interaction.guild.get_role(config.admin_role).mention)
            embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
            await interaction.response.send_message(embed=embed, ephemeral=True)

    class bug(ui.Modal, title='–ë–∞–≥'):
        bug_type = ui.TextInput(label='–¢–∏–ø –±–∞–≥–∞ (–±–æ—Ç, —Å–µ—Ä–≤–µ—Ä –∏ —Ç.–ø.):', style=discord.TextStyle.short)
        steps = ui.TextInput(label='–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', style=discord.TextStyle.long)
        expected = ui.TextInput(label='–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', style=discord.TextStyle.short)
        actual = ui.TextInput(label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', style=discord.TextStyle.short)

        async def on_submit(self, interaction: discord.Interaction):
            thread = await interaction.channel.create_thread(name=f"–±–∞–≥-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
            ticket_id = int(thread.name.split("-")[-1])
            open_embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
            open_embed = interaction_author(open_embed, interaction)
            modal_params = discord.Embed(color=config.colors.info)
            modal_params.add_field(name="**–¢–∏–ø –±–∞–≥–∞:**", value='>>> ' + self.bug_type.value, inline=False)
            modal_params.add_field(name="**–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:**", value='>>> ' + self.steps.value, inline=False)
            modal_params.add_field(name="**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**", value='>>> ' + self.expected.value, inline=False)
            modal_params.add_field(name="**–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**", value='>>> ' + self.actual.value, inline=False)
            await thread.send(embeds=[open_embed, modal_params], view = ticket_operator())
            await thread.send(interaction.user.mention)
            await thread.send(interaction.guild.get_role(config.admin_role).mention)
            embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
            await interaction.response.send_message(embed=embed, ephemeral=True)

    class report():
        class player(ui.Modal, title='–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞'):
            place = ui.TextInput(label='–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:', style=discord.TextStyle.short)
            troublemaker = ui.TextInput(label='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:', style=discord.TextStyle.short)
            trouble = ui.TextInput(label='–ù–∞—Ä—É—à–µ–Ω–∏–µ:', style=discord.TextStyle.long)

            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∂–∞–ª–æ–±–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞', color=config.colors.danger)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name="**–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**", value='>>> ' + self.place.value, inline=False)
                modal_params.add_field(name="**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:**", value='>>> ' + self.troublemaker.value, inline=False)
                modal_params.add_field(name="**–ù–∞—Ä—É—à–µ–Ω–∏–µ:**", value='>>> ' + self.trouble.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.admin_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)
        
        class administrator(ui.Modal, title='–ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'):
            place = ui.TextInput(label='–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:', style=discord.TextStyle.short)
            troublemaker = ui.TextInput(label='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:', style=discord.TextStyle.short)
            trouble = ui.TextInput(label='–ù–∞—Ä—É—à–µ–Ω–∏–µ:', style=discord.TextStyle.long)

            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∂–∞–ª–æ–±–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', color=config.colors.danger)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name="**–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**", value='>>> ' + self.place.value, inline=False)
                modal_params.add_field(name="**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:**", value='>>> ' + self.troublemaker.value, inline=False)
                modal_params.add_field(name="**–ù–∞—Ä—É—à–µ–Ω–∏–µ:**", value='>>> ' + self.trouble.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

        class appeal(ui.Modal, title='–ê–ø–ø–µ–ª—è—Ü–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'):
            trouble = ui.TextInput(label='–ù–∞—Ä—É—à–µ–Ω–∏–µ:', style=discord.TextStyle.short)
            punishment = ui.TextInput(label='–ù–∞–∫–∞–∑–∞–Ω–∏–µ:', style=discord.TextStyle.short)
            appeal_reason = ui.TextInput(label='–ü–æ—á–µ–º—É –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–Ω—è—Ç–æ:', style=discord.TextStyle.long)

            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∂–∞–ª–æ–±–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ê–ø–ø–µ–ª—è—Ü–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è', color=config.colors.warning)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name="**–ù–∞—Ä—É—à–µ–Ω–∏–µ:**", value='>>> ' + self.trouble.value, inline=False)
                modal_params.add_field(name="**–ù–∞–∫–∞–∑–∞–Ω–∏–µ:**", value='>>> ' + self.punishment.value, inline=False)
                modal_params.add_field(name="**–ü–æ—á–µ–º—É –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–Ω—è—Ç–æ::**", value='>>> ' + self.appeal_reason.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.admin_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

    class application():
        class player_role(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è)'):
            age = ui.TextInput(label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', style=discord.TextStyle.short)
            exp = ui.TextInput(label='–°–∫–æ–ª—å–∫–æ —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ:', style=discord.TextStyle.short)
            familiar = ui.TextInput(label='–ö—Ç–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∑–Ω–∞—Ç—å –≤–∞—Å:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–í—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≥—Å:', style=discord.TextStyle.short)
            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç–∞!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.age.label, value='>>> ' + self.age.value, inline=False)
                modal_params.add_field(name=self.exp.label, value='>>> ' + self.exp.value, inline=False)
                modal_params.add_field(name=self.familiar.label, value='>>> ' + self.familiar.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)
        
        class administrator_scp(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ SCP'):
            age = ui.TextInput(label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', style=discord.TextStyle.short)
            steam = ui.TextInput(label='C—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam:', style=discord.TextStyle.short)
            exp = ui.TextInput(label='–í–∞—à –æ–ø—ã—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏:', style=discord.TextStyle.short)
            activity =ui.TextInput(label='–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:', style=discord.TextStyle.short)
            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç–∞!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ SCP', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.age.label, value='>>> ' + self.age.value, inline=False)
                modal_params.add_field(name=self.steam.label, value='>>> ' + self.steam.value, inline=False)
                modal_params.add_field(name=self.exp.label, value='>>> ' + self.exp.value, inline=False)
                modal_params.add_field(name=self.activity.label, value='>>> ' + self.activity.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

        class administrator_discord(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ Discord'): 
            age = ui.TextInput(label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', style=discord.TextStyle.short)
            exp = ui.TextInput(label='–í–∞—à –æ–ø—ã—Ç –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', style=discord.TextStyle.short)
            activity = ui.TextInput(label='–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç—É:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:', style=discord.TextStyle.short)
            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç–∞!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ Discord', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.age.label, value='>>> ' + self.age.value, inline=False)
                modal_params.add_field(name=self.exp.label, value='>>> ' + self.exp.value, inline=False)
                modal_params.add_field(name=self.activity.label, value='>>> ' + self.activity.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

        class administrator_tech(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö. –∞–¥–º–∏–Ω–∞'):
            age = ui.TextInput(label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', style=discord.TextStyle.short)
            skills = ui.TextInput(label='–£–º–µ–Ω–∏—è, –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:', style=discord.TextStyle.short)
            activity = ui.TextInput(label='–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç—É:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:', style=discord.TextStyle.short)
            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç–∞!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö. –∞–¥–º–∏–Ω–∞', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.age.label, value='>>> ' + self.age.value, inline=False)
                modal_params.add_field(name=self.skills.label, value='>>> ' + self.skills.value, inline=False)
                modal_params.add_field(name=self.activity.label, value='>>> ' + self.activity.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

        class eventmaker(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–≤–µ–Ω—Ç–æ–ª–æ–≥–∞:'):
            age = ui.TextInput(label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:', style=discord.TextStyle.short)
            events = ui.TextInput(label='–ö–∞–∫–∏–µ –∏–≤–µ–Ω—Ç—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:', style=discord.TextStyle.short)
            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç–∞!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–≤–µ–Ω—Ç–æ–ª–æ–≥–∞', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.age.label, value='>>> ' + self.age.value, inline=False)
                modal_params.add_field(name=self.events.label, value='>>> ' + self.events.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

        class organization(ui.Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π:'):
            name = ui.TextInput(label='–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–ò–∑ –ª–æ—Ä–∞ SCP):', style=discord.TextStyle.short)
            activity = ui.TextInput(label='–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', style=discord.TextStyle.short)
            members = ui.TextInput(label='–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–ª–µ–Ω–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –µ—ë –ª–∏–¥–µ—Ä–æ–≤:', style=discord.TextStyle.short)
            interview = ui.TextInput(label='–ö–æ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:', style=discord.TextStyle.short)

            async def on_submit(self, interaction: discord.Interaction):
                thread = await interaction.channel.create_thread(name=f"–∑–∞—è–≤–∫–∞-–Ω–æ–º–µ—Ä-{tickets_counter_add()}", auto_archive_duration=10080, invitable=False)
                ticket_id = int(thread.name.split("-")[-1])
                open_embed = discord.Embed(title=f"–í–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {ticket_id} –æ—Ç–∫—Ä—ã—Ç!", color=config.colors.info)
                open_embed = interaction_author(open_embed, interaction)
                ticket_type = discord.Embed(title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π', color=config.colors.success)
                modal_params = discord.Embed(color=config.colors.info)
                modal_params.add_field(name=self.name.label, value='>>> ' + self.name.value, inline=False)
                modal_params.add_field(name=self.activity.label, value='>>> ' + self.activity.value, inline=False)
                modal_params.add_field(name=self.members.label, value='>>> ' + self.members.value, inline=False)
                modal_params.add_field(name=self.interview.label, value='>>> ' + self.interview.value, inline=False)
                await thread.send(embeds=[open_embed, ticket_type, modal_params], view = ticket_operator())
                await thread.send(interaction.user.mention)
                await thread.send(interaction.guild.get_role(config.secretary_role).mention)
                embed = discord.Embed(title="–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç", description=f"–í –∫–∞–Ω–∞–ª–µ {thread.mention}", color=config.colors.info)
                await interaction.response.send_message(embed=embed, ephemeral=True)

class ticket_operator(discord.ui.View):
    def __init__(self) -> None:
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.red, custom_id="close_ticket")
    async def close(self, interaction, button):
        embed = discord.Embed(title="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?", description=f"–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ {config.auto_cancel_time} —Å–µ–∫—É–Ω–¥", color=config.colors.info)
        await interaction.response.send_message(embed = embed, view = confirm_closing(), ephemeral = True, delete_after = config.auto_cancel_time)

class confirm_closing(discord.ui.View):

    def __init__(self) -> None:
        super().__init__(timeout=config.auto_cancel_time)

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.red)
    async def close(self, interaction, button):
        ticket_number = int(interaction.channel.name.split("-")[-1])
        channel = interaction.channel
        embed = discord.Embed(title=f"–¢–∏–∫–µ—Ç –Ω–æ–º–µ—Ä {ticket_number} –∑–∞–∫—Ä—ã—Ç!", color=config.colors.info)
        is_first = True
        async for message in channel.history(limit=2, oldest_first=True):
            if is_first:
                is_first = False       
                embed.add_field(name='–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è:', value=f'<t:{unix_datetime(message.created_at)}>', inline=True)
                continue     
            embed.add_field(name='–û—Ç–∫—Ä—ã–ª:', value=message.content, inline=True)
        embed.add_field(name='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É:', value=interaction.channel.jump_url, inline=False)
        embed.add_field(name='–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:', value=f'<t:{unix_datetime(interaction.created_at)}>', inline=True)
        embed.add_field(name='–ó–∞–∫—Ä—ã–ª:', value=interaction.user.mention, inline=True)
        await interaction.user.send(embed = embed)
        await interaction.guild.get_channel(config.tickets_log_channel).send(embed = embed)
        await interaction.response.send_message(embed = embed)
        await interaction.channel.edit(archived = True, locked = True)
        
@tasks.loop(seconds = 60) # repeat after every 10 seconds
async def presence():
    emoji = choice(emojis)
    online_members = [member for member in client.get_guild(1122085072577757275).members if not member.bot and member.status == discord.Status.online]
    if online_members:
        activity_text = f'{choice(online_members).display_name} {emoji}'
        await client.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=activity_text))

def add_views():
    client.add_view(ticket_launcher.question())
    client.add_view(ticket_launcher.bug())
    client.add_view(ticket_launcher.report())
    client.add_view(ticket_operator())

@client.event
async def setup_hook():
    add_views()

@client.event
async def on_ready():
    presence.start()
    await tree.sync(guild=discord.Object(id=config.guild))
    print(f'{client.user.name} –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!    \n{round(client.latency * 1000)}ms')


#–ü–∏–Ω–≥ –±–æ—Ç–∞ –ø–æ slash-–∫–æ–º–º–∞–Ω–¥–µ ----------------
@tree.command(name="–ø–∏–Ω–≥", description="–ü–∏–Ω–≥–∞–Ω–∏ –±–æ—Ç–∞!", guild=discord.Object(id=config.guild))
async def on_ping(intrct):
    embed = discord.Embed(title="–ü–æ–Ω–≥!    ", description=f"{round(client.latency * 1000)}–º—Å", color=config.colors.info)
    await intrct.response.send_message(embed=embed)


#C–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ----------------
@client.event 
async def on_message(message):
    if message.author == client.user:
        return
    if randint(0, 15) == 1:
        if message.channel.category_id not in config.very_serious_categories:
            await message.add_reaction(choice(message.guild.emojis))

#–í—ã–¥–∞—á–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ú–µ—Ü–µ–Ω–∞—Ç –∑–∞ –±—É—Å—Ç ----------------
@client.event
async def on_member_update(before, after):
    if len(before.roles) < len(after.roles):
        new_role = next(role for role in after.roles if role not in before.roles)
        if new_role.id == config.nitro_booster_id:
            await after.add_roles(client.get_guild(int(config.guild)).get_role(1138436827909455925))
    elif len(before.roles) > len(after.roles):
        old_role = next(role for role in before.roles if role not in after.roles)
        if old_role.id == config.nitro_booster_id:
            await after.remove_roles(client.get_guild(int(config.guild)).get_role(1138436827909455925))

#–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ ----------------
@tree.command(name="—Ç–∏–∫–µ—Ç", description="–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", guild=discord.Object(id=config.guild))
async def ticketing(intrct, title: str, description: str, type: str):
    if intrct.user.id in config.bot_engineers:
        match type:
            case '–í–æ–ø—Ä–æ—Å':
                embed = discord.Embed(title=title, description=description, color=config.colors.info)
                await intrct.channel.send(embed=embed, view=ticket_launcher.question())
                client.add_view(ticket_launcher.question())
            case '–ë–∞–≥':
                embed = discord.Embed(title=title, description=description, color=config.colors.danger)
                await intrct.channel.send(embed=embed, view=ticket_launcher.bug())
                client.add_view(ticket_launcher.bug())
            case '–ñ–∞–ª–æ–±–∞':
                embed = discord.Embed(title=title, description=description, color=config.colors.warning)
                await intrct.channel.send(embed=embed, view=ticket_launcher.report())
                client.add_view(ticket_launcher.report())
            case '–ó–∞—è–≤–∫–∞':
                embed = discord.Embed(title=title, description=description, color=config.colors.info)
                await intrct.channel.send(embed=embed, view=ticket_launcher.application())
                client.add_view(ticket_launcher.application())
        await intrct.response.send_message("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ (–∏–ª–∏ –ø–æ—á—Ç–∏) –∑–∞–ø—É—â–µ–Ω–∞", ephemeral=True)
    else:
        await intrct.response.send_message("> –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–∏ÃÜ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)


#–í—ã–µ–±–∞—Ç—å –±–æ—Ç–∞ (–¥–ª—è –ú–ê–û)
@tree.command(name="–≤—ã–µ–±–∞—Ç—å", description="–î–ª—è MAO", guild=discord.Object(id=config.guild))
async def on_sex(intrct):
    sex_variants = [f'–û, –¥–∞, {intrct.user.display_name}! –í—ã–µ–±–∏ –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, {intrct.user.display_name} üíï','–ë–æ–∂–µ –º–æ–π, –∫–∞–∫ —Å–∏–ª—å–Ω–æ... üíò','–ï—â–µ–µ–µ! –ï—â–µ–µ–µ–µ–µ–µ! üòç',f'{intrct.user.display_name}, —è –ª—é–±–ª—é —Ç–µ–±—è!']
    fucked = False
    if intrct.channel.is_nsfw():
        for role in intrct.user.roles:
            if role.id in config.can_sex:
                embed = discord.Embed(title = choice(sex_variants),description='', color = config.colors.info)
                await intrct.response.send_message(embed = embed)
                fucked = True
                break
        if not fucked:
            await intrct.response.send_message("> –¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω –µ–±–∞—Ç—å –±–æ—Ç–∞ üëø", ephemeral = True)
    else:
        await intrct.response.send_message("> –≠—Ç–æ –Ω–µ NSFW –∫–∞–Ω–∞–ª!", ephemeral = True)

#8ball -----------------
@tree.command(name="8ball", description="–ü–æ–≥–∞–¥–∞–µ–º~", guild=discord.Object(id=config.guild))
async def magic_ball(intrct):
    variants = ['–≠—Ç–æ —Ç–æ—á–Ω–æ.',
             '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.',
             '–î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ.',
             '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ.',
             '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –¥–∞.',
             '–í–µ—Ä–æ—è—Ç–Ω–æ.',
             '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ.',
             '–î–∞.',
             '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥–∞.',
             '–û—Ç–≤–µ—Ç –Ω–µ—è—Å–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
             '–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.',
             '–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.',
             '–°–µ–π—á–∞—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
             '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
             '–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ.',
             '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî –Ω–µ—Ç.',
             '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç.',
             '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.',
             '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.']
    embed = discord.Embed(title = choice(variants), color = config.colors.info)
    await intrct.response.send_message(embed = embed)

#–û—Ö —Ç—ã–∂ –µ–º–æ–µ......
@tree.command(name="–≤–∞—Ä–Ω", description="–í—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", guild=discord.Object(id=config.guild))
async def warn(intrct, user: discord.Member, reason: str):
    connection = sqlite3.connect('data/primary.db')
    cursor = connection.cursor()
    if user.id == client.user.id:
        await intrct.response.send_message("–ù–µ—Ç.", ephemeral=True)
        return
    if user.bot == 1:
        await intrct.response.send_message("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç—É.", ephemeral=True)
        return
    if user == intrct.user:
        await intrct.response.send_message("–ë—Ä–æ, –ø–æ–ø—Ä–æ—Å–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–≥–æ...", ephemeral=True)
        return
    dt_string = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    cursor.execute('SELECT max(warn_id) FROM warns')
    case_id = cursor.fetchone()[0] + 1
    embed = discord.Embed(
            title=f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
            description=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ \n–°–ª—É—á–∞–π {case_id}',
            color=config.colors.danger
        )
    interaction_author(embed, intrct)
    embed.add_field(
            name="–ü—Ä–∏—á–∏–Ω–∞:",
            value=reason,
            inline=False
        )
    await intrct.response.send_message(embed=embed)
    await config.warns_log_channel.send(embed=embed)
    response = await intrct.original_response()
    cursor.execute('INSERT INTO warns (name, reason, message) VALUES (?, ?, ?)', (intrct.user.mention, reason, response.jump_url))
    connection.commit()
    connection.close()

client.run(config.token)